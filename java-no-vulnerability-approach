// OWASP Top 10 in Java - Secure Coding Guide

// 1. Injection (SQL Injection Example)
public class InjectionExample {
    // Vulnerable
    public void vulnerableLogin(String username, String password) throws SQLException {
        String query = "SELECT * FROM users WHERE username='" + username + "' AND password='" + password + "'";
        Statement stmt = connection.createStatement();
        ResultSet rs = stmt.executeQuery(query);
    }

    // Secure
    public void secureLogin(String username, String password) throws SQLException {
        String query = "SELECT * FROM users WHERE username=? AND password=?";
        PreparedStatement pstmt = connection.prepareStatement(query);
        pstmt.setString(1, username);
        pstmt.setString(2, password);
        ResultSet rs = pstmt.executeQuery();
    }
}

// 2. Broken Authentication
public class AuthenticationExample {
    // Vulnerable - no session handling
    public void login(String user, String pass) {
        if (isValid(user, pass)) {
            // No session ID regeneration, insecure session
        }
    }

    // Secure
    public void secureLogin(HttpServletRequest request, String user, String pass) {
        if (isValid(user, pass)) {
            HttpSession session = request.getSession();
            session.invalidate();
            session = request.getSession(true); // Create new session
            session.setAttribute("user", user);
        }
    }
}

// 3. Sensitive Data Exposure
public class SensitiveDataExample {
    // Vulnerable
    public void transmitInsecure(String data) throws IOException {
        Socket socket = new Socket("example.com", 80);
        socket.getOutputStream().write(data.getBytes());
    }

    // Secure
    public void transmitSecure(String data) throws IOException {
        SSLSocketFactory factory = (SSLSocketFactory) SSLSocketFactory.getDefault();
        SSLSocket socket = (SSLSocket) factory.createSocket("example.com", 443);
        socket.getOutputStream().write(data.getBytes());
    }
}

// 4. XML External Entities (XXE)
public class XXEExample {
    // Vulnerable
    public void parseXML(InputStream xmlStream) throws Exception {
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        DocumentBuilder db = dbf.newDocumentBuilder();
        Document doc = db.parse(xmlStream);
    }

    // Secure
    public void secureParseXML(InputStream xmlStream) throws Exception {
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        dbf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
        DocumentBuilder db = dbf.newDocumentBuilder();
        Document doc = db.parse(xmlStream);
    }
}

// 5. Broken Access Control
public class AccessControlExample {
    // Vulnerable
    public void viewProfile(String userId) {
        // No check if user has permission to view this userId
    }

    // Secure
    public void secureViewProfile(String currentUserId, String requestedUserId) {
        if (currentUserId.equals(requestedUserId) || isAdmin(currentUserId)) {
            // Show profile
        } else {
            throw new SecurityException("Unauthorized access");
        }
    }
}

// 6. Security Misconfigurations
public class ConfigExample {
    // Vulnerable
    public void loadInsecureConfig() throws IOException {
        Properties props = new Properties();
        FileInputStream fis = new FileInputStream("config.properties");
        props.load(fis);
    }

    // Secure
    public void loadSecureConfig() throws IOException {
        InputStream fis = getClass().getClassLoader().getResourceAsStream("config.properties");
        if (fis == null) throw new FileNotFoundException("config.properties not found");
        Properties props = new Properties();
        props.load(fis);
    }
}

// 7. Cross-Site Scripting (XSS)
public class XSSExample {
    // Vulnerable
    public void renderInput(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String input = request.getParameter("comment");
        response.getWriter().println("<p>" + input + "</p>");
    }

    // Secure
    public void secureRenderInput(HttpServletRequest request, HttpServletResponse response) throws IOException {
        String input = request.getParameter("comment");
        input = input.replaceAll("<", "&lt;").replaceAll(">", "&gt;");
        response.getWriter().println("<p>" + input + "</p>");
    }
}

// 8. Insecure Deserialization
public class DeserializationExample {
    // Vulnerable
    public void insecureDeserialize(String filePath) throws IOException, ClassNotFoundException {
        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(filePath));
        Object obj = ois.readObject();
    }

    // Secure
    public void secureDeserialize(String filePath) throws IOException, ClassNotFoundException {
        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(filePath));
        Object obj = ois.readObject();
        if (!(obj instanceof SafeClass)) {
            throw new SecurityException("Invalid object type");
        }
    }
}

// 9. Using Components with Known Vulnerabilities
// Secure practice: use tools like OWASP Dependency-Check, regularly update dependencies

// 10. Insufficient Logging and Monitoring
public class LoggingExample {
    private static final Logger logger = Logger.getLogger("AppLogger");

    // Vulnerable
    public void login(String username, String password) {
        // Only prints to console, does not log attempts
        System.out.println("Login attempted");
    }

    // Secure
    public void secureLogin(String username, boolean success) {
        if (success) {
            logger.info("Successful login for user: " + username);
        } else {
            logger.warning("Failed login attempt for user: " + username);
        }
    }
}
